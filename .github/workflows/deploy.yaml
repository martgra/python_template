name: Build and Deploy Template

on:
  push:
    branches:
      - template

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout template branch
        uses: actions/checkout@v4
        with:
          ref: template
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Run template tests
        run: make test

      - name: Build template output
        run: make build

      - name: Get template commit SHA
        id: template_sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Clone repository for main branch
        run: |
          cd ..
          git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main-repo
          cd main-repo
          # Try to checkout main, or create orphan if it doesn't exist
          git checkout main 2>/dev/null || git checkout --orphan main

      - name: Apply build output to main branch
        run: |
          cd ../main-repo
          # Remove all files except .git
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
          # Copy build output
          cp -r ../python_template/build_output/. .
          # Remove copier answers file (shouldn't be in generated project)
          rm -f .copier-answers.yml
          
      - name: Commit and create PR
        run: |
          cd ../main-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          
          # Check if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_ENV
          else
            # If main doesn't exist on remote, push it first
            if ! git ls-remote --heads origin main | grep -q main; then
              echo "Creating main branch"
              git commit -m "Initial commit from template@${{ steps.template_sha.outputs.sha }}"
              git push origin main
            fi
            
            # Create and push PR branch
            git checkout -b template-build
            git commit -m "Build from template@${{ steps.template_sha.outputs.sha }}" --allow-empty
            git push -f origin template-build
            echo "has_changes=true" >> $GITHUB_ENV
          fi

      - name: Create Pull Request
        if: env.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Try to create PR, if it fails because PR exists, update it
          if ! gh pr create \
            --base main \
            --head template-build \
            --title "Build from template@${{ steps.template_sha.outputs.sha }}" \
            --body "## ðŸ¤– Automated Template Build

          This PR contains the rendered template from the latest changes on the \`template\` branch.

          **Source commit:** \`${{ steps.template_sha.outputs.sha }}\`
          **Build timestamp:** ${{ github.event.head_commit.timestamp }}

          ### âœ… Validation
          - Template tests passed
          - Pre-commit hooks validated" 2>&1 | tee /tmp/pr-output.txt; then
            # Check if error is because PR already exists
            if grep -q "already exists" /tmp/pr-output.txt; then
              echo "PR already exists, updating it"
              gh pr edit template-build \
                --title "Build from template@${{ steps.template_sha.outputs.sha }}" \
                --body "## ðŸ¤– Automated Template Build

          This PR contains the rendered template from the latest changes on the \`template\` branch.

          **Source commit:** \`${{ steps.template_sha.outputs.sha }}\`
          **Build timestamp:** ${{ github.event.head_commit.timestamp }}

          ### âœ… Validation
          - Template tests passed
          - Pre-commit hooks validated"
            else
              echo "Failed to create PR"
              cat /tmp/pr-output.txt
              exit 1
            fi
          else
            echo "PR created successfully"
          fi
